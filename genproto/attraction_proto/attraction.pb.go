// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: attraction_proto/attraction.proto

package attraction

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetAttractionsByCategoryRequest struct {
	Category             string   `protobuf:"bytes,1,opt,name=category,proto3" json:"category"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAttractionsByCategoryRequest) Reset()         { *m = GetAttractionsByCategoryRequest{} }
func (m *GetAttractionsByCategoryRequest) String() string { return proto.CompactTextString(m) }
func (*GetAttractionsByCategoryRequest) ProtoMessage()    {}
func (*GetAttractionsByCategoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f13c1c7d656f8ce, []int{0}
}
func (m *GetAttractionsByCategoryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAttractionsByCategoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAttractionsByCategoryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAttractionsByCategoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAttractionsByCategoryRequest.Merge(m, src)
}
func (m *GetAttractionsByCategoryRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAttractionsByCategoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAttractionsByCategoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAttractionsByCategoryRequest proto.InternalMessageInfo

func (m *GetAttractionsByCategoryRequest) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

type GetAttractionsByCategoryResponse struct {
	Attractions          []*Attraction `protobuf:"bytes,1,rep,name=attractions,proto3" json:"attractions"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GetAttractionsByCategoryResponse) Reset()         { *m = GetAttractionsByCategoryResponse{} }
func (m *GetAttractionsByCategoryResponse) String() string { return proto.CompactTextString(m) }
func (*GetAttractionsByCategoryResponse) ProtoMessage()    {}
func (*GetAttractionsByCategoryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f13c1c7d656f8ce, []int{1}
}
func (m *GetAttractionsByCategoryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAttractionsByCategoryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAttractionsByCategoryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAttractionsByCategoryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAttractionsByCategoryResponse.Merge(m, src)
}
func (m *GetAttractionsByCategoryResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAttractionsByCategoryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAttractionsByCategoryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAttractionsByCategoryResponse proto.InternalMessageInfo

func (m *GetAttractionsByCategoryResponse) GetAttractions() []*Attraction {
	if m != nil {
		return m.Attractions
	}
	return nil
}

type GetAttractionByNameRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAttractionByNameRequest) Reset()         { *m = GetAttractionByNameRequest{} }
func (m *GetAttractionByNameRequest) String() string { return proto.CompactTextString(m) }
func (*GetAttractionByNameRequest) ProtoMessage()    {}
func (*GetAttractionByNameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f13c1c7d656f8ce, []int{2}
}
func (m *GetAttractionByNameRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAttractionByNameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAttractionByNameRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAttractionByNameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAttractionByNameRequest.Merge(m, src)
}
func (m *GetAttractionByNameRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAttractionByNameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAttractionByNameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAttractionByNameRequest proto.InternalMessageInfo

func (m *GetAttractionByNameRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetAttractionByNameResponse struct {
	Attractions          []*Attraction `protobuf:"bytes,1,rep,name=attractions,proto3" json:"attractions"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GetAttractionByNameResponse) Reset()         { *m = GetAttractionByNameResponse{} }
func (m *GetAttractionByNameResponse) String() string { return proto.CompactTextString(m) }
func (*GetAttractionByNameResponse) ProtoMessage()    {}
func (*GetAttractionByNameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f13c1c7d656f8ce, []int{3}
}
func (m *GetAttractionByNameResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAttractionByNameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAttractionByNameResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAttractionByNameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAttractionByNameResponse.Merge(m, src)
}
func (m *GetAttractionByNameResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAttractionByNameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAttractionByNameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAttractionByNameResponse proto.InternalMessageInfo

func (m *GetAttractionByNameResponse) GetAttractions() []*Attraction {
	if m != nil {
		return m.Attractions
	}
	return nil
}

type Attraction struct {
	AttractionId         string   `protobuf:"bytes,1,opt,name=attraction_id,json=attractionId,proto3" json:"attraction_id"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	Description          string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description"`
	LocationId           string   `protobuf:"bytes,4,opt,name=location_id,json=locationId,proto3" json:"location_id"`
	OpeningHours         string   `protobuf:"bytes,5,opt,name=opening_hours,json=openingHours,proto3" json:"opening_hours"`
	ClosingHours         string   `protobuf:"bytes,6,opt,name=closing_hours,json=closingHours,proto3" json:"closing_hours"`
	Category             string   `protobuf:"bytes,7,opt,name=category,proto3" json:"category"`
	Rating               float32  `protobuf:"fixed32,8,opt,name=rating,proto3" json:"rating"`
	ImageUrl             string   `protobuf:"bytes,9,opt,name=image_url,json=imageUrl,proto3" json:"image_url"`
	WebsiteUrl           string   `protobuf:"bytes,10,opt,name=website_url,json=websiteUrl,proto3" json:"website_url"`
	ContactInformation   string   `protobuf:"bytes,11,opt,name=contact_information,json=contactInformation,proto3" json:"contact_information"`
	CreatedAt            string   `protobuf:"bytes,12,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt            string   `protobuf:"bytes,13,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	DeletedAt            string   `protobuf:"bytes,14,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at"`
	OwnerId              string   `protobuf:"bytes,15,opt,name=owner_id,json=ownerId,proto3" json:"owner_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Attraction) Reset()         { *m = Attraction{} }
func (m *Attraction) String() string { return proto.CompactTextString(m) }
func (*Attraction) ProtoMessage()    {}
func (*Attraction) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f13c1c7d656f8ce, []int{4}
}
func (m *Attraction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Attraction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Attraction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Attraction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Attraction.Merge(m, src)
}
func (m *Attraction) XXX_Size() int {
	return m.Size()
}
func (m *Attraction) XXX_DiscardUnknown() {
	xxx_messageInfo_Attraction.DiscardUnknown(m)
}

var xxx_messageInfo_Attraction proto.InternalMessageInfo

func (m *Attraction) GetAttractionId() string {
	if m != nil {
		return m.AttractionId
	}
	return ""
}

func (m *Attraction) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Attraction) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Attraction) GetLocationId() string {
	if m != nil {
		return m.LocationId
	}
	return ""
}

func (m *Attraction) GetOpeningHours() string {
	if m != nil {
		return m.OpeningHours
	}
	return ""
}

func (m *Attraction) GetClosingHours() string {
	if m != nil {
		return m.ClosingHours
	}
	return ""
}

func (m *Attraction) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *Attraction) GetRating() float32 {
	if m != nil {
		return m.Rating
	}
	return 0
}

func (m *Attraction) GetImageUrl() string {
	if m != nil {
		return m.ImageUrl
	}
	return ""
}

func (m *Attraction) GetWebsiteUrl() string {
	if m != nil {
		return m.WebsiteUrl
	}
	return ""
}

func (m *Attraction) GetContactInformation() string {
	if m != nil {
		return m.ContactInformation
	}
	return ""
}

func (m *Attraction) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Attraction) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *Attraction) GetDeletedAt() string {
	if m != nil {
		return m.DeletedAt
	}
	return ""
}

func (m *Attraction) GetOwnerId() string {
	if m != nil {
		return m.OwnerId
	}
	return ""
}

type GetAllOwnersRequest struct {
	Page                 int64    `protobuf:"varint,1,opt,name=page,proto3" json:"page"`
	Limit                int64    `protobuf:"varint,2,opt,name=limit,proto3" json:"limit"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAllOwnersRequest) Reset()         { *m = GetAllOwnersRequest{} }
func (m *GetAllOwnersRequest) String() string { return proto.CompactTextString(m) }
func (*GetAllOwnersRequest) ProtoMessage()    {}
func (*GetAllOwnersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f13c1c7d656f8ce, []int{5}
}
func (m *GetAllOwnersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllOwnersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllOwnersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllOwnersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllOwnersRequest.Merge(m, src)
}
func (m *GetAllOwnersRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAllOwnersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllOwnersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllOwnersRequest proto.InternalMessageInfo

func (m *GetAllOwnersRequest) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *GetAllOwnersRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type GetAllOwnersResponse struct {
	Owners               []*Owner `protobuf:"bytes,1,rep,name=owners,proto3" json:"owners"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAllOwnersResponse) Reset()         { *m = GetAllOwnersResponse{} }
func (m *GetAllOwnersResponse) String() string { return proto.CompactTextString(m) }
func (*GetAllOwnersResponse) ProtoMessage()    {}
func (*GetAllOwnersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f13c1c7d656f8ce, []int{6}
}
func (m *GetAllOwnersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllOwnersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllOwnersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllOwnersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllOwnersResponse.Merge(m, src)
}
func (m *GetAllOwnersResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAllOwnersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllOwnersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllOwnersResponse proto.InternalMessageInfo

func (m *GetAllOwnersResponse) GetOwners() []*Owner {
	if m != nil {
		return m.Owners
	}
	return nil
}

type UpdateOwnerImageRequest struct {
	PhoneNumber          string   `protobuf:"bytes,1,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number"`
	NewImageUrl          string   `protobuf:"bytes,2,opt,name=new_image_url,json=newImageUrl,proto3" json:"new_image_url"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateOwnerImageRequest) Reset()         { *m = UpdateOwnerImageRequest{} }
func (m *UpdateOwnerImageRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateOwnerImageRequest) ProtoMessage()    {}
func (*UpdateOwnerImageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f13c1c7d656f8ce, []int{7}
}
func (m *UpdateOwnerImageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateOwnerImageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateOwnerImageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateOwnerImageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateOwnerImageRequest.Merge(m, src)
}
func (m *UpdateOwnerImageRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateOwnerImageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateOwnerImageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateOwnerImageRequest proto.InternalMessageInfo

func (m *UpdateOwnerImageRequest) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *UpdateOwnerImageRequest) GetNewImageUrl() string {
	if m != nil {
		return m.NewImageUrl
	}
	return ""
}

type UpdateOwnerImageResponse struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateOwnerImageResponse) Reset()         { *m = UpdateOwnerImageResponse{} }
func (m *UpdateOwnerImageResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateOwnerImageResponse) ProtoMessage()    {}
func (*UpdateOwnerImageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f13c1c7d656f8ce, []int{8}
}
func (m *UpdateOwnerImageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateOwnerImageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateOwnerImageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateOwnerImageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateOwnerImageResponse.Merge(m, src)
}
func (m *UpdateOwnerImageResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateOwnerImageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateOwnerImageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateOwnerImageResponse proto.InternalMessageInfo

func (m *UpdateOwnerImageResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type DeleteOwnerRequest struct {
	PhoneNumber          string   `protobuf:"bytes,1,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteOwnerRequest) Reset()         { *m = DeleteOwnerRequest{} }
func (m *DeleteOwnerRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteOwnerRequest) ProtoMessage()    {}
func (*DeleteOwnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f13c1c7d656f8ce, []int{9}
}
func (m *DeleteOwnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteOwnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteOwnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteOwnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteOwnerRequest.Merge(m, src)
}
func (m *DeleteOwnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteOwnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteOwnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteOwnerRequest proto.InternalMessageInfo

func (m *DeleteOwnerRequest) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

type DeleteOwnerResponse struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteOwnerResponse) Reset()         { *m = DeleteOwnerResponse{} }
func (m *DeleteOwnerResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteOwnerResponse) ProtoMessage()    {}
func (*DeleteOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f13c1c7d656f8ce, []int{10}
}
func (m *DeleteOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteOwnerResponse.Merge(m, src)
}
func (m *DeleteOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteOwnerResponse proto.InternalMessageInfo

func (m *DeleteOwnerResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type Owner struct {
	OwnerId              string   `protobuf:"bytes,1,opt,name=owner_id,json=ownerId,proto3" json:"owner_id"`
	FullName             string   `protobuf:"bytes,2,opt,name=full_name,json=fullName,proto3" json:"full_name"`
	Email                string   `protobuf:"bytes,3,opt,name=email,proto3" json:"email"`
	Password             string   `protobuf:"bytes,4,opt,name=password,proto3" json:"password"`
	Birthday             string   `protobuf:"bytes,5,opt,name=birthday,proto3" json:"birthday"`
	PhoneNumber          string   `protobuf:"bytes,6,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number"`
	ImageUrl             string   `protobuf:"bytes,7,opt,name=image_url,json=imageUrl,proto3" json:"image_url"`
	RefreshToken         string   `protobuf:"bytes,8,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token"`
	CreatedAt            string   `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt            string   `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	DeletedAt            string   `protobuf:"bytes,11,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at"`
	Role                 string   `protobuf:"bytes,12,opt,name=role,proto3" json:"role"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Owner) Reset()         { *m = Owner{} }
func (m *Owner) String() string { return proto.CompactTextString(m) }
func (*Owner) ProtoMessage()    {}
func (*Owner) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f13c1c7d656f8ce, []int{11}
}
func (m *Owner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Owner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Owner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Owner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Owner.Merge(m, src)
}
func (m *Owner) XXX_Size() int {
	return m.Size()
}
func (m *Owner) XXX_DiscardUnknown() {
	xxx_messageInfo_Owner.DiscardUnknown(m)
}

var xxx_messageInfo_Owner proto.InternalMessageInfo

func (m *Owner) GetOwnerId() string {
	if m != nil {
		return m.OwnerId
	}
	return ""
}

func (m *Owner) GetFullName() string {
	if m != nil {
		return m.FullName
	}
	return ""
}

func (m *Owner) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Owner) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *Owner) GetBirthday() string {
	if m != nil {
		return m.Birthday
	}
	return ""
}

func (m *Owner) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *Owner) GetImageUrl() string {
	if m != nil {
		return m.ImageUrl
	}
	return ""
}

func (m *Owner) GetRefreshToken() string {
	if m != nil {
		return m.RefreshToken
	}
	return ""
}

func (m *Owner) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Owner) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *Owner) GetDeletedAt() string {
	if m != nil {
		return m.DeletedAt
	}
	return ""
}

func (m *Owner) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

type GetOwnerRequest struct {
	PhoneNumber          string   `protobuf:"bytes,1,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetOwnerRequest) Reset()         { *m = GetOwnerRequest{} }
func (m *GetOwnerRequest) String() string { return proto.CompactTextString(m) }
func (*GetOwnerRequest) ProtoMessage()    {}
func (*GetOwnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f13c1c7d656f8ce, []int{12}
}
func (m *GetOwnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOwnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOwnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetOwnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOwnerRequest.Merge(m, src)
}
func (m *GetOwnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetOwnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOwnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetOwnerRequest proto.InternalMessageInfo

func (m *GetOwnerRequest) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

type GetOwnerResponse struct {
	Owner                *Owner   `protobuf:"bytes,1,opt,name=Owner,proto3" json:"Owner"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetOwnerResponse) Reset()         { *m = GetOwnerResponse{} }
func (m *GetOwnerResponse) String() string { return proto.CompactTextString(m) }
func (*GetOwnerResponse) ProtoMessage()    {}
func (*GetOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f13c1c7d656f8ce, []int{13}
}
func (m *GetOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOwnerResponse.Merge(m, src)
}
func (m *GetOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetOwnerResponse proto.InternalMessageInfo

func (m *GetOwnerResponse) GetOwner() *Owner {
	if m != nil {
		return m.Owner
	}
	return nil
}

func init() {
	proto.RegisterType((*GetAttractionsByCategoryRequest)(nil), "attraction.GetAttractionsByCategoryRequest")
	proto.RegisterType((*GetAttractionsByCategoryResponse)(nil), "attraction.GetAttractionsByCategoryResponse")
	proto.RegisterType((*GetAttractionByNameRequest)(nil), "attraction.GetAttractionByNameRequest")
	proto.RegisterType((*GetAttractionByNameResponse)(nil), "attraction.GetAttractionByNameResponse")
	proto.RegisterType((*Attraction)(nil), "attraction.Attraction")
	proto.RegisterType((*GetAllOwnersRequest)(nil), "attraction.GetAllOwnersRequest")
	proto.RegisterType((*GetAllOwnersResponse)(nil), "attraction.GetAllOwnersResponse")
	proto.RegisterType((*UpdateOwnerImageRequest)(nil), "attraction.UpdateOwnerImageRequest")
	proto.RegisterType((*UpdateOwnerImageResponse)(nil), "attraction.UpdateOwnerImageResponse")
	proto.RegisterType((*DeleteOwnerRequest)(nil), "attraction.DeleteOwnerRequest")
	proto.RegisterType((*DeleteOwnerResponse)(nil), "attraction.DeleteOwnerResponse")
	proto.RegisterType((*Owner)(nil), "attraction.Owner")
	proto.RegisterType((*GetOwnerRequest)(nil), "attraction.GetOwnerRequest")
	proto.RegisterType((*GetOwnerResponse)(nil), "attraction.GetOwnerResponse")
}

func init() { proto.RegisterFile("attraction_proto/attraction.proto", fileDescriptor_2f13c1c7d656f8ce) }

var fileDescriptor_2f13c1c7d656f8ce = []byte{
	// 856 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xdd, 0x8e, 0xdb, 0x44,
	0x18, 0xc5, 0x9b, 0xcd, 0xdf, 0xe7, 0x84, 0xa6, 0xb3, 0x55, 0x31, 0x5e, 0x48, 0x52, 0x2f, 0xa2,
	0x8b, 0x40, 0x5d, 0xd4, 0x56, 0x02, 0x09, 0x21, 0x94, 0x14, 0x54, 0x72, 0xb3, 0x08, 0x43, 0xc5,
	0x0d, 0xc8, 0x38, 0xf6, 0x24, 0xb1, 0x70, 0x3c, 0x66, 0x66, 0x4c, 0x94, 0x37, 0xe1, 0x41, 0x78,
	0x08, 0x2e, 0x79, 0x04, 0xb4, 0xbd, 0xe6, 0x1d, 0xd0, 0xfc, 0x38, 0x76, 0x9c, 0x78, 0x5b, 0xc4,
	0x9d, 0xe7, 0x9c, 0x33, 0x33, 0x67, 0xe6, 0x3b, 0x9f, 0x6d, 0x78, 0xe0, 0x73, 0x4e, 0xfd, 0x80,
	0x47, 0x24, 0xf1, 0x52, 0x4a, 0x38, 0xb9, 0x2a, 0x80, 0x47, 0x12, 0x40, 0x50, 0x20, 0xce, 0xe7,
	0x30, 0x7a, 0x8e, 0xf9, 0x64, 0x07, 0xb0, 0xe9, 0xf6, 0x99, 0xcf, 0xf1, 0x92, 0xd0, 0xad, 0x8b,
	0x7f, 0xcd, 0x30, 0xe3, 0xc8, 0x86, 0x4e, 0xa0, 0x21, 0xcb, 0x18, 0x1b, 0x97, 0x5d, 0x77, 0x37,
	0x76, 0x7e, 0x84, 0x71, 0xfd, 0x74, 0x96, 0x92, 0x84, 0x61, 0xf4, 0x29, 0x98, 0xc5, 0x86, 0xcc,
	0x32, 0xc6, 0x8d, 0x4b, 0xf3, 0xf1, 0xfd, 0x47, 0x25, 0x5b, 0xc5, 0x7c, 0xb7, 0x2c, 0x75, 0x3e,
	0x06, 0x7b, 0x6f, 0xf5, 0xe9, 0xf6, 0xda, 0x5f, 0xe3, 0xdc, 0x17, 0x82, 0xd3, 0xc4, 0x5f, 0x63,
	0xed, 0x49, 0x3e, 0x3b, 0x3f, 0xc0, 0xf9, 0xd1, 0x19, 0xff, 0xdb, 0xca, 0x3f, 0x0d, 0x80, 0x82,
	0x43, 0x17, 0xd0, 0x2f, 0xdd, 0x73, 0x14, 0x6a, 0x13, 0xbd, 0x02, 0x9c, 0x85, 0x3b, 0x83, 0x27,
	0x85, 0x41, 0x34, 0x06, 0x33, 0xc4, 0x2c, 0xa0, 0x51, 0x2a, 0x44, 0x56, 0x43, 0x52, 0x65, 0x08,
	0x8d, 0xc0, 0x8c, 0x49, 0xe0, 0xe7, 0x0b, 0x9f, 0x4a, 0x05, 0xe4, 0xd0, 0x2c, 0x14, 0x7b, 0x93,
	0x14, 0x27, 0x51, 0xb2, 0xf4, 0x56, 0x24, 0xa3, 0xcc, 0x6a, 0xaa, 0xbd, 0x35, 0xf8, 0xb5, 0xc0,
	0x84, 0x28, 0x88, 0x09, 0x2b, 0x44, 0x2d, 0x25, 0xd2, 0xa0, 0x12, 0x95, 0x2b, 0xdb, 0xde, 0xaf,
	0x2c, 0xba, 0x0f, 0x2d, 0xea, 0xf3, 0x28, 0x59, 0x5a, 0x9d, 0xb1, 0x71, 0x79, 0xe2, 0xea, 0x11,
	0x3a, 0x87, 0x6e, 0xb4, 0xf6, 0x97, 0xd8, 0xcb, 0x68, 0x6c, 0x75, 0xd5, 0x24, 0x09, 0xbc, 0xa0,
	0xb1, 0xf0, 0xbe, 0xc1, 0x73, 0x16, 0x71, 0x45, 0x83, 0xf2, 0xae, 0x21, 0x21, 0xb8, 0x82, 0xb3,
	0x80, 0x24, 0xdc, 0x0f, 0xb8, 0x17, 0x25, 0x0b, 0x42, 0xd7, 0xf2, 0x50, 0x96, 0x29, 0x85, 0x48,
	0x53, 0xb3, 0x82, 0x41, 0xef, 0x02, 0x04, 0x14, 0xfb, 0x1c, 0x87, 0x9e, 0xcf, 0xad, 0x9e, 0xd4,
	0x75, 0x35, 0x32, 0xe1, 0x82, 0xce, 0xd2, 0x30, 0xa7, 0xfb, 0x8a, 0xd6, 0x88, 0xa2, 0x43, 0x1c,
	0x63, 0x4d, 0xbf, 0xa9, 0x68, 0x8d, 0x4c, 0x38, 0x7a, 0x1b, 0x3a, 0x64, 0x93, 0x60, 0x2a, 0xee,
	0xf9, 0x8e, 0x24, 0xdb, 0x72, 0x3c, 0x0b, 0x9d, 0x2f, 0xe0, 0x4c, 0x04, 0x29, 0x8e, 0xbf, 0x11,
	0x00, 0x2b, 0x65, 0x2e, 0xf5, 0x97, 0x2a, 0x73, 0x0d, 0x57, 0x3e, 0xa3, 0x7b, 0xd0, 0x8c, 0xa3,
	0x75, 0xc4, 0x65, 0x9d, 0x1b, 0xae, 0x1a, 0x38, 0x13, 0xb8, 0xb7, 0xbf, 0x80, 0x8e, 0xe0, 0x07,
	0xd0, 0x92, 0x7b, 0xe4, 0xe9, 0xbb, 0x5b, 0x4e, 0x9f, 0xd4, 0xba, 0x5a, 0xe0, 0xfc, 0x0c, 0x6f,
	0xbd, 0x90, 0x47, 0x91, 0xf0, 0x4c, 0x5c, 0x72, 0xee, 0xe3, 0x01, 0xf4, 0xd2, 0x15, 0x49, 0xb0,
	0x97, 0x64, 0xeb, 0x39, 0xa6, 0x3a, 0x7e, 0xa6, 0xc4, 0xae, 0x25, 0x84, 0x1c, 0xe8, 0x27, 0x78,
	0xe3, 0x15, 0xc5, 0x52, 0x31, 0x34, 0x13, 0xbc, 0x99, 0xe9, 0x7a, 0x39, 0x4f, 0xc1, 0x3a, 0xdc,
	0x41, 0x1b, 0xb5, 0xa0, 0xcd, 0xb2, 0x20, 0xc0, 0x8c, 0xc9, 0xd5, 0x3b, 0x6e, 0x3e, 0x74, 0x3e,
	0x01, 0xf4, 0xa5, 0xbc, 0x43, 0x65, 0xf7, 0xb5, 0x2d, 0x39, 0x57, 0x70, 0xb6, 0x37, 0xf1, 0x95,
	0x3b, 0xbd, 0x3c, 0x81, 0xa6, 0xd4, 0xee, 0x95, 0xca, 0xd8, 0x2b, 0x95, 0x48, 0xe4, 0x22, 0x8b,
	0x63, 0xaf, 0xd4, 0x6b, 0x1d, 0x01, 0x88, 0xce, 0x17, 0xc5, 0xc1, 0x6b, 0x3f, 0x8a, 0x75, 0xa7,
	0xa9, 0x81, 0x08, 0x7e, 0xea, 0x33, 0xb6, 0x21, 0x34, 0x6f, 0xb0, 0xdd, 0x58, 0x70, 0xf3, 0x88,
	0xf2, 0x55, 0xe8, 0x6f, 0x75, 0x67, 0xed, 0xc6, 0x07, 0x67, 0x6c, 0x1d, 0x5e, 0xfb, 0x5e, 0x7f,
	0xb4, 0x2b, 0xfd, 0x71, 0x01, 0x7d, 0x8a, 0x17, 0x14, 0xb3, 0x95, 0xc7, 0xc9, 0x2f, 0x38, 0x91,
	0xbd, 0xd5, 0x75, 0x7b, 0x1a, 0xfc, 0x5e, 0x60, 0x95, 0xc8, 0x77, 0x6f, 0x8f, 0x3c, 0xdc, 0x1e,
	0x79, 0xb3, 0x1a, 0x79, 0x04, 0xa7, 0x94, 0xc4, 0x58, 0x77, 0x92, 0x7c, 0x76, 0x9e, 0xc2, 0x9d,
	0xe7, 0x98, 0xff, 0xd7, 0x62, 0x7e, 0x06, 0x83, 0x62, 0x96, 0xae, 0xe4, 0x43, 0x5d, 0x2e, 0xa9,
	0x3f, 0x9a, 0x6d, 0xc5, 0x3f, 0xfe, 0xa3, 0x09, 0x77, 0x8b, 0xd7, 0xe9, 0x77, 0x98, 0xfe, 0x16,
	0x05, 0x18, 0x3d, 0x01, 0xf3, 0x99, 0x3c, 0xa7, 0xaa, 0xf9, 0xe1, 0x74, 0xfb, 0x10, 0x42, 0x5f,
	0x41, 0x27, 0xf7, 0x81, 0xce, 0xcb, 0x74, 0xe5, 0x4c, 0xf6, 0x3b, 0xc7, 0x49, 0x6d, 0xfd, 0x1a,
	0xcc, 0x52, 0x36, 0xd1, 0xb0, 0x2c, 0x3e, 0x4c, 0xbb, 0x3d, 0xaa, 0xe5, 0xf5, 0x7a, 0x3f, 0xc1,
	0xa0, 0xda, 0x5a, 0xe8, 0xa2, 0x3c, 0xa9, 0xa6, 0xb5, 0xed, 0xf7, 0x6e, 0x17, 0xe9, 0xe5, 0xbf,
	0x85, 0x5e, 0xf9, 0xf5, 0x82, 0x46, 0x95, 0xc3, 0x55, 0xdf, 0x5c, 0xf6, 0xb8, 0x5e, 0xa0, 0x97,
	0x9c, 0xc2, 0x40, 0xdd, 0x7e, 0xe9, 0x3b, 0x57, 0xf3, 0x6d, 0xb4, 0x6b, 0x70, 0xb4, 0x50, 0xaf,
	0xcd, 0xca, 0xf7, 0x17, 0xbd, 0x5f, 0xdd, 0xfc, 0xf8, 0x27, 0xdd, 0x7e, 0xf8, 0x4a, 0x9d, 0xf6,
	0x9a, 0x81, 0x55, 0xf7, 0xdf, 0x81, 0x3e, 0xac, 0x5d, 0xe4, 0xf0, 0xe7, 0xc6, 0xfe, 0xe8, 0xf5,
	0xc4, 0x6a, 0xdb, 0xe9, 0xe0, 0xcf, 0x9b, 0xa1, 0xf1, 0xd7, 0xcd, 0xd0, 0xf8, 0xfb, 0x66, 0x68,
	0xfc, 0xfe, 0x72, 0xf8, 0xc6, 0xbc, 0x25, 0x7f, 0xa9, 0x9e, 0xfc, 0x1b, 0x00, 0x00, 0xff, 0xff,
	0xdf, 0x83, 0xcd, 0x50, 0x77, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AttractionServiceClient is the client API for AttractionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AttractionServiceClient interface {
	CreateOwner(ctx context.Context, in *Owner, opts ...grpc.CallOption) (*Owner, error)
	GetOwner(ctx context.Context, in *GetOwnerRequest, opts ...grpc.CallOption) (*GetOwnerResponse, error)
	DeleteOwner(ctx context.Context, in *DeleteOwnerRequest, opts ...grpc.CallOption) (*DeleteOwnerResponse, error)
	UpdateOwnerImage(ctx context.Context, in *UpdateOwnerImageRequest, opts ...grpc.CallOption) (*UpdateOwnerImageResponse, error)
	GetAllOwners(ctx context.Context, in *GetAllOwnersRequest, opts ...grpc.CallOption) (*GetAllOwnersResponse, error)
	CreateAttraction(ctx context.Context, in *Attraction, opts ...grpc.CallOption) (*Attraction, error)
	GetAttractionByName(ctx context.Context, in *GetAttractionByNameRequest, opts ...grpc.CallOption) (*GetAttractionByNameResponse, error)
	GetAttractionsByCategory(ctx context.Context, in *GetAttractionsByCategoryRequest, opts ...grpc.CallOption) (*GetAttractionsByCategoryResponse, error)
}

type attractionServiceClient struct {
	cc *grpc.ClientConn
}

func NewAttractionServiceClient(cc *grpc.ClientConn) AttractionServiceClient {
	return &attractionServiceClient{cc}
}

func (c *attractionServiceClient) CreateOwner(ctx context.Context, in *Owner, opts ...grpc.CallOption) (*Owner, error) {
	out := new(Owner)
	err := c.cc.Invoke(ctx, "/attraction.AttractionService/CreateOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attractionServiceClient) GetOwner(ctx context.Context, in *GetOwnerRequest, opts ...grpc.CallOption) (*GetOwnerResponse, error) {
	out := new(GetOwnerResponse)
	err := c.cc.Invoke(ctx, "/attraction.AttractionService/GetOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attractionServiceClient) DeleteOwner(ctx context.Context, in *DeleteOwnerRequest, opts ...grpc.CallOption) (*DeleteOwnerResponse, error) {
	out := new(DeleteOwnerResponse)
	err := c.cc.Invoke(ctx, "/attraction.AttractionService/DeleteOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attractionServiceClient) UpdateOwnerImage(ctx context.Context, in *UpdateOwnerImageRequest, opts ...grpc.CallOption) (*UpdateOwnerImageResponse, error) {
	out := new(UpdateOwnerImageResponse)
	err := c.cc.Invoke(ctx, "/attraction.AttractionService/UpdateOwnerImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attractionServiceClient) GetAllOwners(ctx context.Context, in *GetAllOwnersRequest, opts ...grpc.CallOption) (*GetAllOwnersResponse, error) {
	out := new(GetAllOwnersResponse)
	err := c.cc.Invoke(ctx, "/attraction.AttractionService/GetAllOwners", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attractionServiceClient) CreateAttraction(ctx context.Context, in *Attraction, opts ...grpc.CallOption) (*Attraction, error) {
	out := new(Attraction)
	err := c.cc.Invoke(ctx, "/attraction.AttractionService/CreateAttraction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attractionServiceClient) GetAttractionByName(ctx context.Context, in *GetAttractionByNameRequest, opts ...grpc.CallOption) (*GetAttractionByNameResponse, error) {
	out := new(GetAttractionByNameResponse)
	err := c.cc.Invoke(ctx, "/attraction.AttractionService/GetAttractionByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attractionServiceClient) GetAttractionsByCategory(ctx context.Context, in *GetAttractionsByCategoryRequest, opts ...grpc.CallOption) (*GetAttractionsByCategoryResponse, error) {
	out := new(GetAttractionsByCategoryResponse)
	err := c.cc.Invoke(ctx, "/attraction.AttractionService/GetAttractionsByCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AttractionServiceServer is the server API for AttractionService service.
type AttractionServiceServer interface {
	CreateOwner(context.Context, *Owner) (*Owner, error)
	GetOwner(context.Context, *GetOwnerRequest) (*GetOwnerResponse, error)
	DeleteOwner(context.Context, *DeleteOwnerRequest) (*DeleteOwnerResponse, error)
	UpdateOwnerImage(context.Context, *UpdateOwnerImageRequest) (*UpdateOwnerImageResponse, error)
	GetAllOwners(context.Context, *GetAllOwnersRequest) (*GetAllOwnersResponse, error)
	CreateAttraction(context.Context, *Attraction) (*Attraction, error)
	GetAttractionByName(context.Context, *GetAttractionByNameRequest) (*GetAttractionByNameResponse, error)
	GetAttractionsByCategory(context.Context, *GetAttractionsByCategoryRequest) (*GetAttractionsByCategoryResponse, error)
}

// UnimplementedAttractionServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAttractionServiceServer struct {
}

func (*UnimplementedAttractionServiceServer) CreateOwner(ctx context.Context, req *Owner) (*Owner, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOwner not implemented")
}
func (*UnimplementedAttractionServiceServer) GetOwner(ctx context.Context, req *GetOwnerRequest) (*GetOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOwner not implemented")
}
func (*UnimplementedAttractionServiceServer) DeleteOwner(ctx context.Context, req *DeleteOwnerRequest) (*DeleteOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOwner not implemented")
}
func (*UnimplementedAttractionServiceServer) UpdateOwnerImage(ctx context.Context, req *UpdateOwnerImageRequest) (*UpdateOwnerImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOwnerImage not implemented")
}
func (*UnimplementedAttractionServiceServer) GetAllOwners(ctx context.Context, req *GetAllOwnersRequest) (*GetAllOwnersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllOwners not implemented")
}
func (*UnimplementedAttractionServiceServer) CreateAttraction(ctx context.Context, req *Attraction) (*Attraction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAttraction not implemented")
}
func (*UnimplementedAttractionServiceServer) GetAttractionByName(ctx context.Context, req *GetAttractionByNameRequest) (*GetAttractionByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttractionByName not implemented")
}
func (*UnimplementedAttractionServiceServer) GetAttractionsByCategory(ctx context.Context, req *GetAttractionsByCategoryRequest) (*GetAttractionsByCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttractionsByCategory not implemented")
}

func RegisterAttractionServiceServer(s *grpc.Server, srv AttractionServiceServer) {
	s.RegisterService(&_AttractionService_serviceDesc, srv)
}

func _AttractionService_CreateOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Owner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttractionServiceServer).CreateOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/attraction.AttractionService/CreateOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttractionServiceServer).CreateOwner(ctx, req.(*Owner))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttractionService_GetOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttractionServiceServer).GetOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/attraction.AttractionService/GetOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttractionServiceServer).GetOwner(ctx, req.(*GetOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttractionService_DeleteOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttractionServiceServer).DeleteOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/attraction.AttractionService/DeleteOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttractionServiceServer).DeleteOwner(ctx, req.(*DeleteOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttractionService_UpdateOwnerImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOwnerImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttractionServiceServer).UpdateOwnerImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/attraction.AttractionService/UpdateOwnerImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttractionServiceServer).UpdateOwnerImage(ctx, req.(*UpdateOwnerImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttractionService_GetAllOwners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllOwnersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttractionServiceServer).GetAllOwners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/attraction.AttractionService/GetAllOwners",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttractionServiceServer).GetAllOwners(ctx, req.(*GetAllOwnersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttractionService_CreateAttraction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Attraction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttractionServiceServer).CreateAttraction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/attraction.AttractionService/CreateAttraction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttractionServiceServer).CreateAttraction(ctx, req.(*Attraction))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttractionService_GetAttractionByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAttractionByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttractionServiceServer).GetAttractionByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/attraction.AttractionService/GetAttractionByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttractionServiceServer).GetAttractionByName(ctx, req.(*GetAttractionByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttractionService_GetAttractionsByCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAttractionsByCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttractionServiceServer).GetAttractionsByCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/attraction.AttractionService/GetAttractionsByCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttractionServiceServer).GetAttractionsByCategory(ctx, req.(*GetAttractionsByCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AttractionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "attraction.AttractionService",
	HandlerType: (*AttractionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOwner",
			Handler:    _AttractionService_CreateOwner_Handler,
		},
		{
			MethodName: "GetOwner",
			Handler:    _AttractionService_GetOwner_Handler,
		},
		{
			MethodName: "DeleteOwner",
			Handler:    _AttractionService_DeleteOwner_Handler,
		},
		{
			MethodName: "UpdateOwnerImage",
			Handler:    _AttractionService_UpdateOwnerImage_Handler,
		},
		{
			MethodName: "GetAllOwners",
			Handler:    _AttractionService_GetAllOwners_Handler,
		},
		{
			MethodName: "CreateAttraction",
			Handler:    _AttractionService_CreateAttraction_Handler,
		},
		{
			MethodName: "GetAttractionByName",
			Handler:    _AttractionService_GetAttractionByName_Handler,
		},
		{
			MethodName: "GetAttractionsByCategory",
			Handler:    _AttractionService_GetAttractionsByCategory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "attraction_proto/attraction.proto",
}

func (m *GetAttractionsByCategoryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAttractionsByCategoryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAttractionsByCategoryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Category) > 0 {
		i -= len(m.Category)
		copy(dAtA[i:], m.Category)
		i = encodeVarintAttraction(dAtA, i, uint64(len(m.Category)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetAttractionsByCategoryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAttractionsByCategoryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAttractionsByCategoryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Attractions) > 0 {
		for iNdEx := len(m.Attractions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attractions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAttraction(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetAttractionByNameRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAttractionByNameRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAttractionByNameRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAttraction(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetAttractionByNameResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAttractionByNameResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAttractionByNameResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Attractions) > 0 {
		for iNdEx := len(m.Attractions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attractions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAttraction(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Attraction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Attraction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Attraction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.OwnerId) > 0 {
		i -= len(m.OwnerId)
		copy(dAtA[i:], m.OwnerId)
		i = encodeVarintAttraction(dAtA, i, uint64(len(m.OwnerId)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.DeletedAt) > 0 {
		i -= len(m.DeletedAt)
		copy(dAtA[i:], m.DeletedAt)
		i = encodeVarintAttraction(dAtA, i, uint64(len(m.DeletedAt)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.UpdatedAt) > 0 {
		i -= len(m.UpdatedAt)
		copy(dAtA[i:], m.UpdatedAt)
		i = encodeVarintAttraction(dAtA, i, uint64(len(m.UpdatedAt)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintAttraction(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.ContactInformation) > 0 {
		i -= len(m.ContactInformation)
		copy(dAtA[i:], m.ContactInformation)
		i = encodeVarintAttraction(dAtA, i, uint64(len(m.ContactInformation)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.WebsiteUrl) > 0 {
		i -= len(m.WebsiteUrl)
		copy(dAtA[i:], m.WebsiteUrl)
		i = encodeVarintAttraction(dAtA, i, uint64(len(m.WebsiteUrl)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.ImageUrl) > 0 {
		i -= len(m.ImageUrl)
		copy(dAtA[i:], m.ImageUrl)
		i = encodeVarintAttraction(dAtA, i, uint64(len(m.ImageUrl)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Rating != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Rating))))
		i--
		dAtA[i] = 0x45
	}
	if len(m.Category) > 0 {
		i -= len(m.Category)
		copy(dAtA[i:], m.Category)
		i = encodeVarintAttraction(dAtA, i, uint64(len(m.Category)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ClosingHours) > 0 {
		i -= len(m.ClosingHours)
		copy(dAtA[i:], m.ClosingHours)
		i = encodeVarintAttraction(dAtA, i, uint64(len(m.ClosingHours)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.OpeningHours) > 0 {
		i -= len(m.OpeningHours)
		copy(dAtA[i:], m.OpeningHours)
		i = encodeVarintAttraction(dAtA, i, uint64(len(m.OpeningHours)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.LocationId) > 0 {
		i -= len(m.LocationId)
		copy(dAtA[i:], m.LocationId)
		i = encodeVarintAttraction(dAtA, i, uint64(len(m.LocationId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintAttraction(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAttraction(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AttractionId) > 0 {
		i -= len(m.AttractionId)
		copy(dAtA[i:], m.AttractionId)
		i = encodeVarintAttraction(dAtA, i, uint64(len(m.AttractionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetAllOwnersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllOwnersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllOwnersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Limit != 0 {
		i = encodeVarintAttraction(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.Page != 0 {
		i = encodeVarintAttraction(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetAllOwnersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllOwnersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllOwnersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Owners) > 0 {
		for iNdEx := len(m.Owners) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Owners[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAttraction(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpdateOwnerImageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateOwnerImageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateOwnerImageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NewImageUrl) > 0 {
		i -= len(m.NewImageUrl)
		copy(dAtA[i:], m.NewImageUrl)
		i = encodeVarintAttraction(dAtA, i, uint64(len(m.NewImageUrl)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintAttraction(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateOwnerImageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateOwnerImageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateOwnerImageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteOwnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteOwnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteOwnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintAttraction(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Owner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Owner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Owner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Role) > 0 {
		i -= len(m.Role)
		copy(dAtA[i:], m.Role)
		i = encodeVarintAttraction(dAtA, i, uint64(len(m.Role)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.DeletedAt) > 0 {
		i -= len(m.DeletedAt)
		copy(dAtA[i:], m.DeletedAt)
		i = encodeVarintAttraction(dAtA, i, uint64(len(m.DeletedAt)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.UpdatedAt) > 0 {
		i -= len(m.UpdatedAt)
		copy(dAtA[i:], m.UpdatedAt)
		i = encodeVarintAttraction(dAtA, i, uint64(len(m.UpdatedAt)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintAttraction(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.RefreshToken) > 0 {
		i -= len(m.RefreshToken)
		copy(dAtA[i:], m.RefreshToken)
		i = encodeVarintAttraction(dAtA, i, uint64(len(m.RefreshToken)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ImageUrl) > 0 {
		i -= len(m.ImageUrl)
		copy(dAtA[i:], m.ImageUrl)
		i = encodeVarintAttraction(dAtA, i, uint64(len(m.ImageUrl)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintAttraction(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Birthday) > 0 {
		i -= len(m.Birthday)
		copy(dAtA[i:], m.Birthday)
		i = encodeVarintAttraction(dAtA, i, uint64(len(m.Birthday)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintAttraction(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintAttraction(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FullName) > 0 {
		i -= len(m.FullName)
		copy(dAtA[i:], m.FullName)
		i = encodeVarintAttraction(dAtA, i, uint64(len(m.FullName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OwnerId) > 0 {
		i -= len(m.OwnerId)
		copy(dAtA[i:], m.OwnerId)
		i = encodeVarintAttraction(dAtA, i, uint64(len(m.OwnerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetOwnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOwnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetOwnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintAttraction(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Owner != nil {
		{
			size, err := m.Owner.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAttraction(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAttraction(dAtA []byte, offset int, v uint64) int {
	offset -= sovAttraction(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetAttractionsByCategoryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Category)
	if l > 0 {
		n += 1 + l + sovAttraction(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAttractionsByCategoryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Attractions) > 0 {
		for _, e := range m.Attractions {
			l = e.Size()
			n += 1 + l + sovAttraction(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAttractionByNameRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAttraction(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAttractionByNameResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Attractions) > 0 {
		for _, e := range m.Attractions {
			l = e.Size()
			n += 1 + l + sovAttraction(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Attraction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AttractionId)
	if l > 0 {
		n += 1 + l + sovAttraction(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAttraction(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovAttraction(uint64(l))
	}
	l = len(m.LocationId)
	if l > 0 {
		n += 1 + l + sovAttraction(uint64(l))
	}
	l = len(m.OpeningHours)
	if l > 0 {
		n += 1 + l + sovAttraction(uint64(l))
	}
	l = len(m.ClosingHours)
	if l > 0 {
		n += 1 + l + sovAttraction(uint64(l))
	}
	l = len(m.Category)
	if l > 0 {
		n += 1 + l + sovAttraction(uint64(l))
	}
	if m.Rating != 0 {
		n += 5
	}
	l = len(m.ImageUrl)
	if l > 0 {
		n += 1 + l + sovAttraction(uint64(l))
	}
	l = len(m.WebsiteUrl)
	if l > 0 {
		n += 1 + l + sovAttraction(uint64(l))
	}
	l = len(m.ContactInformation)
	if l > 0 {
		n += 1 + l + sovAttraction(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovAttraction(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 1 + l + sovAttraction(uint64(l))
	}
	l = len(m.DeletedAt)
	if l > 0 {
		n += 1 + l + sovAttraction(uint64(l))
	}
	l = len(m.OwnerId)
	if l > 0 {
		n += 1 + l + sovAttraction(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAllOwnersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovAttraction(uint64(m.Page))
	}
	if m.Limit != 0 {
		n += 1 + sovAttraction(uint64(m.Limit))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAllOwnersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Owners) > 0 {
		for _, e := range m.Owners {
			l = e.Size()
			n += 1 + l + sovAttraction(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateOwnerImageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovAttraction(uint64(l))
	}
	l = len(m.NewImageUrl)
	if l > 0 {
		n += 1 + l + sovAttraction(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateOwnerImageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteOwnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovAttraction(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Owner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OwnerId)
	if l > 0 {
		n += 1 + l + sovAttraction(uint64(l))
	}
	l = len(m.FullName)
	if l > 0 {
		n += 1 + l + sovAttraction(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovAttraction(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovAttraction(uint64(l))
	}
	l = len(m.Birthday)
	if l > 0 {
		n += 1 + l + sovAttraction(uint64(l))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovAttraction(uint64(l))
	}
	l = len(m.ImageUrl)
	if l > 0 {
		n += 1 + l + sovAttraction(uint64(l))
	}
	l = len(m.RefreshToken)
	if l > 0 {
		n += 1 + l + sovAttraction(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovAttraction(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 1 + l + sovAttraction(uint64(l))
	}
	l = len(m.DeletedAt)
	if l > 0 {
		n += 1 + l + sovAttraction(uint64(l))
	}
	l = len(m.Role)
	if l > 0 {
		n += 1 + l + sovAttraction(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetOwnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovAttraction(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Owner != nil {
		l = m.Owner.Size()
		n += 1 + l + sovAttraction(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovAttraction(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAttraction(x uint64) (n int) {
	return sovAttraction(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetAttractionsByCategoryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttraction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAttractionsByCategoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAttractionsByCategoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttraction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttraction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttraction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Category = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttraction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAttraction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAttractionsByCategoryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttraction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAttractionsByCategoryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAttractionsByCategoryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attractions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttraction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAttraction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAttraction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attractions = append(m.Attractions, &Attraction{})
			if err := m.Attractions[len(m.Attractions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttraction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAttraction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAttractionByNameRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttraction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAttractionByNameRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAttractionByNameRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttraction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttraction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttraction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttraction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAttraction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAttractionByNameResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttraction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAttractionByNameResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAttractionByNameResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attractions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttraction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAttraction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAttraction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attractions = append(m.Attractions, &Attraction{})
			if err := m.Attractions[len(m.Attractions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttraction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAttraction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Attraction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttraction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Attraction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Attraction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttractionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttraction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttraction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttraction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttractionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttraction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttraction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttraction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttraction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttraction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttraction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttraction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttraction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttraction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpeningHours", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttraction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttraction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttraction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpeningHours = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClosingHours", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttraction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttraction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttraction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClosingHours = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttraction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttraction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttraction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Category = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rating", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Rating = float32(math.Float32frombits(v))
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttraction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttraction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttraction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebsiteUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttraction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttraction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttraction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WebsiteUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactInformation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttraction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttraction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttraction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactInformation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttraction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttraction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttraction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttraction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttraction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttraction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttraction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttraction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttraction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeletedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttraction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttraction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttraction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttraction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAttraction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllOwnersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttraction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllOwnersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllOwnersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttraction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttraction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAttraction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAttraction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllOwnersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttraction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllOwnersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllOwnersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owners", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttraction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAttraction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAttraction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owners = append(m.Owners, &Owner{})
			if err := m.Owners[len(m.Owners)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttraction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAttraction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateOwnerImageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttraction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateOwnerImageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateOwnerImageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttraction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttraction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttraction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewImageUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttraction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttraction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttraction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewImageUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttraction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAttraction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateOwnerImageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttraction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateOwnerImageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateOwnerImageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttraction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAttraction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAttraction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteOwnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttraction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteOwnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteOwnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttraction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttraction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttraction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttraction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAttraction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttraction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttraction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAttraction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAttraction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Owner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttraction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Owner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Owner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttraction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttraction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttraction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttraction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttraction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttraction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FullName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttraction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttraction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttraction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttraction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttraction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttraction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Birthday", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttraction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttraction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttraction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Birthday = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttraction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttraction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttraction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttraction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttraction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttraction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttraction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttraction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttraction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefreshToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttraction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttraction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttraction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttraction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttraction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttraction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttraction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttraction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttraction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeletedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttraction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttraction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttraction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Role = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttraction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAttraction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOwnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttraction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOwnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOwnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttraction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttraction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttraction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttraction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAttraction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttraction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttraction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAttraction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAttraction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Owner == nil {
				m.Owner = &Owner{}
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttraction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAttraction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAttraction(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAttraction
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAttraction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAttraction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAttraction
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAttraction
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAttraction
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAttraction        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAttraction          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAttraction = fmt.Errorf("proto: unexpected end of group")
)
